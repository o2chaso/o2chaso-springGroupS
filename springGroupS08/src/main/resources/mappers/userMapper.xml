<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.springGroupS08.dao.UserDAO">
	<!-- 로그인 -->
  <select id="getlogin" resultType="com.spring.springGroupS08.vo.UserVO">
    SELECT * FROM userDB WHERE mid = #{mid} LIMIT 1
  </select>
  <!-- 아이디 중복체크 -->
  <select id="getMidCheck" resultType="com.spring.springGroupS08.vo.UserVO">
    SELECT * FROM userDB WHERE mid = #{mid}
  </select>
  <!-- 프로필 조회(mid: 세션에 mid만 가지고 조회) -->
  <select id="getprofile" resultType="com.spring.springGroupS08.vo.UserVO">
    SELECT * FROM userDB WHERE mid = #{mid} LIMIT 1
  </select>
  <!-- 프로필 조회(idx: 업데이트/삭제 시 사용. 이미 세션에 mid가 있기에 DB에 mid를 전달할 필요 없음. 유일한 값 idx를 사용하여 중복 위험을 줄이고 조회 -->
  <select id="getprofileIdx" resultType="com.spring.springGroupS08.vo.UserVO">
    SELECT * FROM userDB WHERE idx = #{idx}
  </select>
  <!-- 닉네임 중복체크 -->
  <select id="getNickNameCheck" resultType="com.spring.springGroupS08.vo.UserVO">
    SELECT * FROM userDB WHERE nickname = #{nickname}
  </select>
  <!-- 이메일 중복체크 -->
  <select id="getEmailCheck" resultType="com.spring.springGroupS08.vo.UserVO">
    SELECT * FROM userDB WHERE email = #{email}
  </select>
  <!-- 로그인한 유저 정보 조회 -->
  <select id="getLoginUser" resultType="com.spring.springGroupS08.vo.UserVO">
    SELECT * FROM userDB WHERE mid = #{mid}
  </select>
  <!-- 전체 유저 리스트 (테스트용) -->
  <select id="gettestList" resultType="map">
    SELECT u.idx, u.mid, u.email, u.name, u.status, r.roleName
    FROM userDB u
    LEFT JOIN userRoles ur ON u.idx = ur.userId
    LEFT JOIN roles r ON ur.roleId = r.roleId
    ORDER BY u.idx
  </select>
  <select id="getUserRolse" resultType="string">
    SELECT r.roleName
    FROM userRoles ur
    JOIN roles r ON ur.roleId = r.roleId
    WHERE ur.userId = #{userId}
  </select>
  <!-- 회원가입 -->
  <insert id="setUserJoin" parameterType="com.spring.springGroupS08.vo.UserVO" useGeneratedKeys="true" keyProperty="idx">
    INSERT INTO userDB
    (mid, password, email, name, nickname, birth_date, gender, phone_number, address, reg_date, mod_date, status)
    VALUES
    (#{vo.mid}, #{vo.password}, #{vo.email}, #{vo.name}, #{vo.nickname},
     #{vo.birthDate, jdbcType=DATE}, #{vo.gender}, #{vo.phoneNumber}, #{vo.address},
     NOW(), NOW(), #{vo.status})
  </insert>
  <!-- 권한 매핑 INSERT -->
  <insert id="insertUserRole">
	  INSERT INTO userRoles (userId, roleId)
	  VALUES (#{userId}, #{roleId})
	</insert>
  
  
  
  <!-- 프로필 이미지 업데이트 -->
  <update id="updateProfileImage" parameterType="com.spring.springGroupS08.vo.UserVO">
    UPDATE userDB 
    SET profileImage = #{profileImage}, mod_date = NOW() 
    WHERE idx = #{idx}
  </update>
  <!-- 프로필 정보 업데이트 -->
  <update id="updateProfile">
  	UPDATE userDB 
  	SET email        = #{vo.email},
  			name         = #{vo.name},
  			nickname     = #{vo.nickname},
  			birth_date   = #{vo.birthDate},
  			gender       = #{vo.gender},
  			phone_number = #{vo.phoneNumber},
  			address      = #{vo.address},
  			mod_date     = NOW()
  	WHERE idx = #{vo.idx}
  </update>
  
  
  <!-- 회원 탈퇴 요청 (7일 후 삭제 대상 표시) -->
	<update id="requestUserDelete">
	  UPDATE userDB 
	  SET status = 0, delete_request_date = NOW(), mod_date = NOW()
	  WHERE idx = #{idx}
	</update>










</mapper>